buildscript {
  repositories {
    jcenter()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath 'com.bmuschko:gradle-docker-plugin:3.0.11'
    classpath 'gradle.plugin.com.patdouble:gradle-aws-ecr-plugin:0.1.4'
  }
}

apply plugin: 'base'
apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin
apply plugin: com.patdouble.gradle.awsecr.AwsecrPlugin

import com.bmuschko.gradle.docker.tasks.image.*

def AWS_ACCESS_KEY_ID = System.getenv("AWS_ACCESS_KEY_ID")
def AWS_SECRET_ACCESS_KEY = System.getenv("AWS_SECRET_ACCESS_KEY")

ext.repository = '038337692500.dkr.ecr.ap-southeast-1.amazonaws.com'    

ext.runCommand = "wget --no-check-certificate https://github.com/jwilder/dockerize/releases/download/v0.6.0/dockerize-linux-amd64-v0.6.0.tar.gz " +
               "&& tar -C /usr/local/bin -xzvf dockerize-linux-amd64-v0.6.0.tar.gz " +
               "&& rm -rf dockerize-linux-amd64-v0.6.0.tar.gz"

build.dependsOn("createDockerfile")

task copyTar(type: Copy, dependsOn: ":${project.ext.imageSource}:build") {
    from project(":${project.ext.imageSource}").collect { it.tasks.withType(Tar) }
    into "$buildDir"
}

task createDockerfile(type: Dockerfile) {
    destFile = project.file("$buildDir/Dockerfile")
    // needed for collateral service lpsolve library which depends 
    // on glibc not present in the jre-alpine image
    if (project.hasProperty("imageDebian")) {
        from 'openjdk:8-jre-slim'
        runCommand "apt update && apt install -y curl tar bash wget openssl && ${project.ext.runCommand}"
    } else {
        from 'openjdk:8-jre-alpine'
        runCommand "apk --update add curl tar bash wget openssl && ${project.ext.runCommand}"              
    }
    maintainer 'Hicham Medkouri "info@anaxo.io"'
    label version: "${version}"

    addFile "${project.ext.imageSource}-${version}.tar", '/'
    entryPoint "/usr/local/bin/dockerize","-timeout","30s","-wait", "tcp://neo4j:7687", "/${project.ext.imageSource}-${version}/bin/${project.imageSource}"
    exposePort project.imagePort        
}

createDockerfile.onlyIf { !project.hasProperty('skip_create_dockerfile') }

task dockerBuildImage(type:DockerBuildImage, dependsOn: [createDockerfile, copyTar]) {
   group = 'docker'   
   inputDir = project.buildDir
   tags = ["${project.repository}/${project.ext.imageName}:latest".toString(), 
          "${project.repository}/${project.ext.imageName}:${version}".toString(),
          "${project.repository}/${project.ext.imageName}:${git_commit}".toString(),
          "${project.repository}/${project.ext.imageName}:build_${build_number}".toString()
           ]
}

task dockerPushImage(dependsOn: dockerBuildImage) {   
   dockerBuildImage.tags.each { tag ->
      String code = tag.hashCode()
      task "publishDockerImageWith$code"(type: DockerPushImage, description: 'publish Docker image') {
        group = 'docker' 
        ext.repository = "https://${project.repository}"
        imageName = "${tag}"
      }
      doLast {
        tasks.findByName("publishDockerImageWith$code").execute()
      }
    }
}
